generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum VehicleType {
  MOTO
  LITE_CAR
  PREMIUM_CAR
}

enum ProfileStatus {
  ACTIVE             // Compte actif et opérationnel
  PENDING            // En attente de validation ou d'activation
  INACTIVE           // Compte désactivé temporairement
  SUSPENDED          // Compte suspendu pour enquête ou violation des règles
  LOCKED             // Compte verrouillé après des tentatives de connexion échouées 
  ARCHIVED           // Compte désactivé définitivement, mais les données sont conservées
  DESACTIVATED       // Compte volontairement désactivé par l'utilisateur ou l'admin
  CLOSED             // Compte fermé définitivement et données supprimées
  UNDER_REVIEW       // Compte en cours d'examen pour des raisons administratives
  UNVERIFIED         // Compte non vérifié (e-mail ou téléphone non confirmé)
  BANNED             // Compte interdit d'accès définitivement
}

enum InvoiceStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RapideWalletStatus {
  UNDETERMINED
  ACTIVE              
  PENDING            
  FROZEN         
  CLOSED             
}

enum UserRole {
  CLIENT	            // Accéder aux services (Food, Mart, Ride, Express), passer des commandes, suivre les livraisons.
  DRIVER	            // Accepter et gérer les courses Ride, Mart, Express.
  ADMIN	              // Gestion complète du système (accès à tout).
  SUPER_ADMIN	        // Accès total avec gestion des administrateurs et des autorisations.
  FOOD_MANAGER      	// Gère les restaurants partenaires et les commandes Food.
  MART_MANAGER	      // Gère les magasins partenaires et les commandes Mart.
  HUMAN_RESOURCES   	// Gère la relation entre rapide et l'exterieure
  FINANCE_MANAGER    	// Gère les paiements, commissions
  FLEET_MANAGER      	// Supervise la flotte de véhicules (maintenance, attribution).
  ORDER_MANAGER       // Gérer les commandes et les livraisons. Assure la bonne fonctinnaliter des commandes.
}

enum MethodType {
  CASH
  MVOLA
  ORANGE_MONEY
  PROMO
  RAPIDE_WALLET
  CARD
}

enum RideStatus {
  FINDING_DRIVER
  CANCELLED
  DRIVER_ACCEPTED
  DRIVER_ON_THE_WAY
  STOPPED
  DRIVER_ARRIVED
  CLIENT_NOT_FOUND
  ON_RIDE
  CLIENT_GIVE_UP
  ARRIVED_DESTINATION
  COMPLETED
  ADMIN_CHECK
  ADMIN_CANCELLED
}

enum RequestFor {
  RIDE
  FOOD
  MART
  EXPRESS
}

enum TransactionType {
  DEPOSIT
  TRANSFER
  RETRAIT
  PAYMENT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REJECTED
}

// Model 

model Profile {
  sub String @id @default(uuid())

  phoneNumber  String     @unique
  email        String?    @unique
  firstName    String
  lastName     String
  gender       GenderType
  birthday     DateTime
  role         UserRole   @default(CLIENT)
  profilePhoto String?

  clientProfile ClientProfile? @relation("AuthClientProfile")
  driverProfile DriverProfile? @relation("AuthDriverProfile")
  adminProfile  AdminProfile?  @relation("AuthAdminProfile")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientProfile {
  clientProfileId String  @id
  profile         Profile @relation("AuthClientProfile", fields: [clientProfileId], references: [sub], onDelete: Cascade)

  clientAddress       Address[]            @relation("ClientAddress")
  rideInvoice         RideInvoice[]        @relation("ClientRideInvoice")
  ride                Ride[]               @relation("ClientRide")
  rapideWallet        RapideWallet?        @relation("ClientRapideWallet")

  status              ProfileStatus        @default(ACTIVE)
  completeRide        Int                  @default(0)
  cancelledRide       Int                  @default(0)

  clientRequest       ClientRequest[]      @relation("ClientRequest")
  transaction         Transaction[]        @relation("ClientTransaction")

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model DriverProfile {
  driverProfileId String  @id
  profile             Profile         @relation("AuthDriverProfile", fields: [driverProfileId], references: [sub], onDelete: Cascade)

  rideInvoice         RideInvoice[]   @relation("DriverRideInvoice")
  ride                Ride[]          @relation("DriverRide")
  rapideWallet        RapideWallet?   @relation("DriverRapideWallet")

  status              ProfileStatus   @default(UNDER_REVIEW)
  completeRide        Int             @default(0)
  cancelledRide       Int             @default(0)

  transaction         Transaction[]   @relation("DriverTransaction")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model AdminProfile {
  adminProfileId String  @id
  profile                      Profile @relation("AuthAdminProfile", fields: [adminProfileId], references: [sub], onDelete: Cascade)

  status                       ProfileStatus @default(UNDER_REVIEW)

  transactionPassword          String?
  isTransactionPasswordDefined Boolean @default(false)

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}
 
model Address {
  addressId String @id @default(uuid())

  name        String
  latitude    Float
  longitude   Float
  description String?

  clientProfileId String?
  clientProfile   ClientProfile? @relation("ClientAddress", fields: [clientProfileId], references: [clientProfileId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RapideWallet {
  rapideWalletId       String              @id @default(uuid())

  balance              Float               @default(0)
  status               RapideWalletStatus  @default(UNDETERMINED)

  idCard               String?
  idCardPhotoRecto     String?
  idCardPhotoVerso     String?
  password             String?
  depositeCount        Int                 @default(0)
  transferCount        Int                 @default(0)
  paymentCount         Int                 @default(0)
  transactionCount     Int                 @default(0)
  successCount         Int                 @default(0)
  failedCount          Int                 @default(0)
  rejectedCount        Int                 @default(0)

  clientProfileId      String?             @unique
  clientProfile        ClientProfile?      @relation("ClientRapideWallet", fields: [clientProfileId], references: [clientProfileId])
  
  driverProfileId      String?             @unique
  driverProfile        DriverProfile?      @relation("DriverRapideWallet", fields: [driverProfileId], references: [driverProfileId])

  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model RapideBalance {
  rapideBalanceId String @id @default(uuid())

  rent    Float
  ride    Float
  food    Float
  mart    Float
  express Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RideInvoice {
  rideInvoiceId       String @id @default(uuid())

  clientProfileId     String?
  clientProfile       ClientProfile? @relation("ClientRideInvoice", fields: [clientProfileId], references: [clientProfileId])

  driverProfileId     String?
  driverProfile       DriverProfile? @relation("DriverRideInvoice", fields: [driverProfileId], references: [driverProfileId])

  vehicleType         VehicleType

  status              RideStatus?
  methodType          MethodType

  pickUpLatitude      Float
  pickUpLongitude     Float
  dropOffLatitude     Float
  dropOffLongitude    Float 
  distanceMeters      Float

  realDuration        Float?
  realPrice           Float?

  startTime           Float?
  endTime             Float?

  transaction         Transaction? @relation("RideTransaction")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Ride {
  rideId            String @id @default(uuid())

  clientProfileId   String?
  clientProfile     ClientProfile? @relation("ClientRide", fields: [clientProfileId], references: [clientProfileId])

  driverProfileId   String?
  driverProfile     DriverProfile? @relation("DriverRide", fields: [driverProfileId], references: [driverProfileId])

  vehicleType       VehicleType
  plateNumber       String?

  methodType        MethodType

  pickUpLocation    String
  dropOffLocation   String
  encodedPolyline   String
  distanceMeters    Float

  estimatedDuration Float
  estimatedPrice    String

  realDuration      Float?
  realPrice         Float?

  status            RideStatus?

  note              Float?
  review            String?
  
  startTime         Float?
  endTime           Float?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Home {
  homeId        String @id @default(uuid())
  name          String @default("Home")
  phoneNumber   String?
  latitude      Float
  longitude     Float
  motoCount     Int    @default(0)
  carCount      Int    @default(0)
}

model ClientRequest {
  clientRequestId String         @id @default(uuid())

  clientProfileId String
  clientProfile   ClientProfile  @relation("ClientRequest", fields: [clientProfileId], references: [clientProfileId])

  requestFor      RequestFor
  responseFor     String?
  senderId        String
  message         String

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Transaction {
  transactionId         String            @id       @default(uuid())
  reference             Int               @unique   @default(autoincrement())
  otherReference        String?

  amount                Float
  fees                  Float             @default(0)
  description           String?

  method                MethodType
  type                  TransactionType
  status                TransactionStatus

  from                  String
  to                    String

  // clientProfileId       String?
  // clientProfile         ClientProfile?     @relation("ClientTransaction", fields: [clientProfileId], references: [clientProfileId])
  clientProfiles        ClientProfile[]    @relation("ClientTransaction")
  driverProfileId       String?
  driverProfile         DriverProfile?     @relation("DriverTransaction", fields: [driverProfileId], references: [driverProfileId])

  rideInvoiceId         String?            @unique
  rideInvoice           RideInvoice?       @relation("RideTransaction", fields: [rideInvoiceId], references: [rideInvoiceId])

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}