generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum VehicleType {
  MOTO
  LITE_CAR
  PREMIUM_CAR
}

enum TransactionType {
  DEPOSIT
  TRANSFERT
  RETRAIT
}

enum ProfileStatus {
  ACTIVE // Compte actif et opérationnel
  PENDING // En attente de validation ou d'activation
  INACTIVE // Compte désactivé temporairement
  SUSPENDED // Compte suspendu pour enquête ou violation des règles
  LOCKED // Compte verrouillé après des tentatives de connexion échouées
  ARCHIVED // Compte désactivé définitivement, mais les données sont conservées
  DEACTIVATED // Compte volontairement désactivé par l'utilisateur ou l'admin
  CLOSED // Compte fermé définitivement et données supprimées
  UNDER_REVIEW // Compte en cours d'examen pour des raisons administratives
  UNVERIFIED // Compte non vérifié (e-mail ou téléphone non confirmé)
  BANNED // Compte interdit d'accès définitivement
}

enum InvoiceStatus {
  PENDING
  SUCCESS
  FAILED
}

enum BalanceStatus {
  ACTIVE // Le solde est utilisable.
  PENDING // Le solde est en attente d'une confirmation.
  FROZEN // Le solde est gelé pour une raison donnée.
  INSUFFICIENT // Le solde est insuffisant pour effectuer des transactions.
  CLOSED // Le compte ou le solde est clôturé.
}

enum UserRole {
  CLIENT
  DRIVER
  ADMIN
  SELLER
}

enum PaymentMethodType {
  CASH
  MVOLA
  ORANGE_MONEY
  PROMO
}

enum RideStatus {
  FINDING_DRIVER
  CANCELLED
  DRIVER_ACCEPTED
  DRIVER_ON_THE_WAY
  STOPPED
  DRIVER_ARRIVED
  CLIENT_NOT_FOUND
  ON_RIDE
  CLIENT_GIVE_UP
  ARRIVED_DESTINATION
  COMPLETED
  ADMIN_CHECK
  ADMIN_CANCELLED
}

model Profile {
  sub String @id @default(uuid())

  phoneNumber  String?    @unique
  email        String?    @unique
  firstName    String
  lastName     String?
  gender       GenderType
  birthday     DateTime
  role         UserRole   @default(CLIENT)
  profilePhoto String?

  clientProfile ClientProfile? @relation("AuthClientProfile")
  driverProfile DriverProfile? @relation("AuthDriverProfile")
  adminProfile  AdminProfile?  @relation("AuthAdminProfile")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  products      Product[] // for seller
  review        Review[]
  favorites     Favorite[]
  cart          Cart?
  stripeAccount StripeAccount?
}

model ClientProfile {
  clientProfileId String  @id
  profile         Profile @relation("AuthClientProfile", fields: [clientProfileId], references: [sub], onDelete: Cascade)

  clientAddress  Address[]       @relation("ClientAddress")
  rideInvoice    RideInvoice[]   @relation("ClientRideInvoice")
  ride           Ride[]          @relation("ClientRide")
  accountBalance AccountBalance? @relation("ClientAccountBalance")

  status        ProfileStatus @default(ACTIVE)
  completeRide  Int           @default(0)
  cancelledRide Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DriverProfile {
  driverProfileId String  @id
  profile         Profile @relation("AuthDriverProfile", fields: [driverProfileId], references: [sub], onDelete: Cascade)

  rideInvoice    RideInvoice[]   @relation("DriverRideInvoice")
  ride           Ride[]          @relation("DriverRide")
  accountBalance AccountBalance? @relation("DriverAccountBalance")
  transaction    Transaction[]   @relation("DriverTransaction")

  status       ProfileStatus @default(UNDER_REVIEW)
  completeRide Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminProfile {
  adminProfileId String  @id
  profile        Profile @relation("AuthAdminProfile", fields: [adminProfileId], references: [sub], onDelete: Cascade)

  status ProfileStatus @default(UNDER_REVIEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  addressId String @id @default(uuid())

  name        String
  latitude    Float
  longitude   Float
  description String?

  clientProfileId String?
  clientProfile   ClientProfile? @relation("ClientAddress", fields: [clientProfileId], references: [clientProfileId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  transactionId   String          @id @default(uuid())
  amount          Float
  transactionType TransactionType @default(TRANSFERT)

  driverProfileId String
  driverProfile   DriverProfile @relation("DriverTransaction", fields: [driverProfileId], references: [driverProfileId])
  createdAt       DateTime      @default(now())
}

model AccountBalance {
  accountBalanceId String        @id @default(uuid())
  balance          Float         @default(0)
  balanceStatus    BalanceStatus @default(ACTIVE)

  clientProfileId String?        @unique
  clientProfile   ClientProfile? @relation("ClientAccountBalance", fields: [clientProfileId], references: [clientProfileId])

  driverProfileId String?        @unique
  driverProfile   DriverProfile? @relation("DriverAccountBalance", fields: [driverProfileId], references: [driverProfileId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RapideBalance {
  rapideBalanceId String @id @default(uuid())

  rent    Float
  ride    Float
  food    Float
  mart    Float
  express Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RideInvoice {
  rideInvoiceId String @id @default(uuid())

  clientProfileId String?
  clientProfile   ClientProfile? @relation("ClientRideInvoice", fields: [clientProfileId], references: [clientProfileId])

  driverProfileId String?
  driverProfile   DriverProfile? @relation("DriverRideInvoice", fields: [driverProfileId], references: [driverProfileId])

  vehicleType VehicleType
  vehicleId   String?

  paymentMethodType   PaymentMethodType
  pickUpLatitude      Float
  pickUpLongitude     Float
  dropOffLatitude     Float
  dropOffLongitude    Float
  encodedPolyline     String
  distanceMeters      Float
  estimatedDuration   Float
  estimatedPriceLower Float
  estimatedPriceUpper Float
  realDuration        Float?
  realPrice           Float?
  status              RideStatus?
  note                Float?
  review              String?
  startTime           Float?
  endTime             Float?

  createdAt String?
  updatedAt String?
}

model Ride {
  rideId String @id @default(uuid())

  clientProfileId String?
  clientProfile   ClientProfile? @relation("ClientRide", fields: [clientProfileId], references: [clientProfileId])

  driverProfileId String?
  driverProfile   DriverProfile? @relation("DriverRide", fields: [driverProfileId], references: [driverProfileId])

  vehicleType       VehicleType
  vehicleId         String?
  paymentMethodType PaymentMethodType
  pickUpLocation    String
  dropOffLocation   String
  encodedPolyline   String
  distanceMeters    Float
  estimatedDuration Float
  estimatedPrice    String
  realDuration      Float?
  realPrice         Float?
  status            RideStatus?
  note              Float?
  review            String?
  startTime         Float?
  endTime           Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Home {
  homeId      String  @id @default(uuid())
  name        String  @default("Home")
  phoneNumber String?
  latitude    Float
  longitude   Float
  motoCount   Int     @default(0)
  carCount    Int     @default(0)
}

//****************** MART && FOOD SECTION  ***********************//
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CategoryFor {
  MART
  FOOD
}

model Category {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  for         CategoryFor
  icon        String
  products    ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Product {
  id          String              @id @default(uuid())
  name        String
  description String
  price       Decimal
  inventory   Int                 @default(0)
  toWear      Boolean             @default(false)
  images      Image[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  categories  ProductCategory[]
  variants    ProductVariant[]
  favorites   Favorite[]
  discounts   ProductDiscount[]
  ingredients ProductIngredient[] // Base ingredients
  sauces      ProductSauce[] // Sauces (max 2)
  addOns      ProductAddOn[] // AddOns (max 2)
  drinks      ProductDrink[] // Drinks (max 2)
  sellerId    String
  seller      Profile             @relation(fields: [sellerId], references: [sub])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  color     String
  size      String
  stock     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, color, size])
}

// Join table for many-to-many relationship
model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  user      Profile @relation(fields: [userId], references: [sub])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([userId, productId])
}

//*************** DISCOUNT PART ON MART & FOOD
// Add this enum to your schema
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Add this model to your schema
model Discount {
  id                String            @id @default(uuid())
  name              String
  description       String?
  type              DiscountType // enum: PERCENTAGE, FIXED_AMOUNT
  value             Decimal // percentage or fixed amount
  startDate         DateTime?
  endDate           DateTime?
  active            Boolean           @default(true)
  minPurchaseAmount Decimal? // minimum purchase required
  maxUses           Int?
  currentUses       Int               @default(0)
  couponCode        String?           @unique
  products          ProductDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductDiscount {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  discount   Discount @relation(fields: [discountId], references: [id])
  discountId String

  @@id([productId, discountId])
}

//****** just for FOOD section ******//
// Base ingredient table
model Ingredient {
  id        String              @id @default(uuid())
  name      String
  icon      String
  products  ProductIngredient[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model ProductIngredient {
  productId    String
  ingredientId String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([productId, ingredientId])
}

// Primary Sauce table
model Sauce {
  id        String         @id @default(uuid())
  name      String
  products  ProductSauce[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductSauce {
  productId String
  sauceId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sauce     Sauce   @relation(fields: [sauceId], references: [id], onDelete: Cascade)

  @@id([productId, sauceId])
}

// Secondary Sauce table
model AddOn {
  id        String         @id @default(uuid())
  name      String
  products  ProductAddOn[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductAddOn {
  productId String
  addOnId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  addOn     AddOn   @relation(fields: [addOnId], references: [id], onDelete: Cascade)

  @@id([productId, addOnId])
}

// Drink table
model Drink {
  id        String         @id @default(uuid())
  name      String
  products  ProductDrink[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductDrink {
  productId String
  drinkId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  drink     Drink   @relation(fields: [drinkId], references: [id], onDelete: Cascade)

  @@id([productId, drinkId])
}
//****** !!!end - just for FOOD section ******//

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       Profile     @relation(fields: [userId], references: [sub])
  status     OrderStatus @default(PENDING)
  totalPrice Decimal
  items      OrderItem[]
  payment    Payment?
  shipping   Shipping?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id              String   @id @default(uuid())
  quantity        Int
  productId       String
  color           String?
  size            String?
  product         Product  @relation(fields: [productId], references: [id])
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id])
  priceAtPurchase Decimal
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Payment {
  id              String        @id @default(uuid())
  status          PaymentStatus @default(PENDING)
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id])
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Shipping {
  id                String    @id @default(uuid())
  orderId           String    @unique
  order             Order     @relation(fields: [orderId], references: [id])
  trackingNumber    String?
  carrier           String?
  estimatedDelivery DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      Profile  @relation(fields: [userId], references: [sub])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      Profile    @relation(fields: [userId], references: [sub])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id              String  @id @default(uuid())
  quantity        Int
  color           String?
  size            String?
  calculatedPrice Decimal @default(0)
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  cartId          String
  cart            Cart    @relation(fields: [cartId], references: [id])

  @@unique([productId, cartId])
}

model StripeAccount {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            Profile  @relation(fields: [userId], references: [sub])
  stripeAccountId String   @unique
  payoutEnabled   Boolean  @default(false)
  payouts         Payout[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Payout {
  id              String        @id @default(uuid())
  stripeAccountId String
  stripeAccount   StripeAccount @relation(fields: [stripeAccountId], references: [id])
  amount          Decimal
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
}

model AuditLog {
  id          String   @id @default(uuid())
  entityType  String // "Order", "Payment", etc.
  entityId    String // ID of the affected entity
  action      String // "STATUS_CHANGE", "CREATE", "UPDATE", etc.
  oldValue    String? // JSON stringified old state
  newValue    String? // JSON stringified new state
  performedBy String? // User ID who performed the action
  createdAt   DateTime @default(now())
}

//****************** end of MART && FOOD SECTION  ***********************//
